buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT"
    }
}

plugins {
    id "maven-publish"
    id "com.matthewprenger.cursegradle" version "1.0.5"
}

apply plugin: "net.minecraftforge.gradle.forge"

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

def secretFile = file "secret.properties"
project.ext.secret = null
if (secretFile.exists()) {
    secretFile.withReader {
        def prop = new Properties()
        prop.load(it)
        project.ext.secret = new ConfigSlurper().parse prop
    }
}

version = getVersionFromJava()
group = config.mod_group
archivesBaseName = config.mod_name
sourceCompatibility = targetCompatibility = 1.6

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "minecraft"
    mappings = "stable_20"
    makeObfSourceJar = false
}

processResources {
    inputs.property "version", getVersionFromJavaWithoutMc()
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version":project.version, "mcversion":project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

jar {
    manifest {
        attributes "FMLAT" : "llibrary_at.cfg"
        attributes "FMLCorePlugin": "net.ilexiconn.llibrary.common.plugin.LLibraryPlugin"
        attributes "FMLCorePluginContainsFMLMod": "true"
    }
}

task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
    manifest {
        attributes "FMLAT" : "llibrary_at.cfg"
        attributes "FMLCorePlugin": "net.ilexiconn.llibrary.common.plugin.LLibraryPlugin"
        attributes "FMLCorePluginContainsFMLMod": "true"
    }
}

artifacts {
    archives devJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId "net.ilexiconn"
            artifactId "llibrary"
            version getVersionFromJava()

            from components.java

            artifact devJar {
                classifier "dev"
            }

            pom.withXml {
                asNode().appendNode("description", "The modding library that claims to be lightweight")
                asNode().appendNode("url", "https://github.com/iLexiconn/LLibrary")
            }
        }
    }
    repositories {
        maven {
            credentials {
                if (secret) {
                    username secret.username
                    password secret.password
                } else {
                    username ""
                    password ""
                }
            }
            if (secret) {
                url secret.repo
            } else {
                url ""
            }
        }
    }
}

import groovy.json.JsonSlurper;
curseforge {
    def url = "https://github.com/iLexiconn/LLibrary/raw/version/versions.json".toURL()
    def versions = new JsonSlurper().parseText url.text

    def type = "release"
    def latestVersion = ""
    versions.versions.each{version, changelog -> latestVersion = version}
    if (versions.beta && versions.beta == latestVersion) {
        type = "beta"
    }

    if (secret) {
        apiKey = secret.curseForgeApiKey
    } else {
        apiKey = ""
    }

    project {
        id = "230798"

        releaseType = type
        changelog = versions.versions[versions.getAt(type)].join("\n")

        addGameVersion config.minecraft_version

        mainArtifact(jar) {
            displayName = "LLibrary " + getVersionFromJavaWithoutMc() + " for Minecraft " + config.minecraft_version
        }

        addArtifact(devJar) {
            displayName = "Development"
        }
    }
}

String getVersionFromJava() {
    return getVersionFromJavaWithoutMc() + "-" + config.minecraft_version;
}

String getVersionFromJavaWithoutMc() {
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String VERSION = \"";
    File file = file("src/main/java/net/ilexiconn/llibrary/LLibrary.java")
    file.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            major = pts[0];
            revision = pts[1];
            patch = pts[2];
        }
    }

    return "$major.$revision.$patch";
}

task generateMappings << {
    def methodDescriptions = new HashMap<String, String>()
    def mappingReplacements = new HashMap<String, String>()
    def mappingFile = new File(System.properties['user.home'] + "/.gradle/caches/minecraft/de/oceanlabs/mcp/mcp_stable/20/srgs/mcp-notch.srg")
    if (mappingFile.exists()) {
        mappingFile.eachLine { line ->
            def parts = line.split(' ')
            if (line.startsWith('CL') || line.startsWith('FD')) {
                mappingReplacements[parts[1]] = parts[2]
            } else if (line.startsWith('MD')) {
                mappingReplacements[parts[1] + parts[2]] = parts[3] + parts[4]
                methodDescriptions[parts[2]] = parts[4]
            }
        }
    }

    def mappingsFile = new File('src/main/resources/mappings.txt')
    mappingsFile.withWriter('UTF-8') { writer ->
        mappingReplacements.each{k, v -> writer.write(k + '=' + v + '\n')}
        methodDescriptions.each{k, v -> writer.write(k + '=' + v + '\n')}
    }
}

compileJava.dependsOn generateMappings